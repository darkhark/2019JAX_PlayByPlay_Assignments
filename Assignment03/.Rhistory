#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
###########library(caTools)              these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
#Data Preprocessing
# no libraries need for this in R
dataset = read.csv('~/ISC215/python/dataInterpreter/Data.csv')
#correcting for missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
#encode categorical data
dataset$City = factor(dataset$City,
levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
library(caTools)              #these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
pbinom(4, 25, .2)
1- pbinom(2, 25, .2)
dbinom(4, 25, .2)
pbinom(4, 25, .2) - pbinom(3, 25, .2)
binom.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23))
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=T)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x ~ y, paired=TRUE)
x = c(2, 6, -1, 1, 5, 0, -12, -1, -4, 9, -7, -15)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE, conf.int = T)
q()
# Assignemnt 2 - Dimension Reduction Set Assignment 02 as wd
set.seed(32)
jaxPassDefense_ALL = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Order by quality as we want to see where the defense is strong and weak
jaxPassDefense = jaxPassDefense_ALL[order(jaxPassDefense_ALL$Quality, decreasing = TRUE),]
getwd()
setwd("STA6704/2019JAX_PlayByPlay/Assignment02/")
# Assignemnt 2 - Dimension Reduction Set Assignment 02 as wd
set.seed(32)
jaxPassDefense_ALL = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Order by quality as we want to see where the defense is strong and weak
jaxPassDefense = jaxPassDefense_ALL[order(jaxPassDefense_ALL$Quality, decreasing = TRUE),]
# Remove added column and target variable
y = jaxPassDefense$Quality
jaxPassDefense = subset(jaxPassDefense, select = -c(X, Quality))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
# Also, no safeties scored for the defense so we'll remove that.
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(qb_dropback, qb_scramble, safety))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense = subset(jaxPassDefense, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid,
qb_dropback, qb_scramble, safety,
game_half_Half2, incomplete_pass))
normalizeColumn = function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
normalizeData = function() {
for(col in 1:ncol(jaxPassDefense)) {
jaxPassDefense[col] = normalizeColumn(jaxPassDefense[col])
}
return(jaxPassDefense)
}
jaxPassDefense_scaled = normalizeData()
write.csv(jaxPassDefense_scaled, "../data/jaxPassDefenseScaled.csv")
install.packages("bnlearn")
library(bnlearn)
setwd("../Assignment03/")
require(bnlearn)
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
View(jaxPassDefense_scaled)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled)
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(X))
# Remove id column
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score",
"jax_timeouts_remaining", "opp_timeouts_remaining")
jaxPassDefense_scaled = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score",
"jax_timeouts_remaining", "opp_timeouts_remaining")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# make values discrete
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score",
"jax_timeouts_remaining", "opp_timeouts_remaining")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# make values discrete
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled)
View(jaxPassDefense_scaled_discrete)
summary(jaxPassDefense_scaled_discrete)
View(jaxPassDefense_scaled_discrete)
jaxPassDefense_model = hc(jaxPassDefense_scaled_discrete)
graphviz.plot(jaxPassDefense_model)
require("Rgraphviz")
jaxPassDefense_model = hc(jaxPassDefense_scaled_discrete)
graphviz.plot(jaxPassDefense_model)
install.pacj
install.packages("Rgraphviz")
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
require("Rgraphviz")
jaxPassDefense_model = hc(jaxPassDefense_scaled_discrete)
graphviz.plot(jaxPassDefense_model)
graphviz.plot(jaxPassDefense_model, fontsize = 20)
jaxPassDefense_arcStrength = arc.strength(
x = jaxPassDefense_model,
data = jaxPassDefense_scaled_discrete
)
strength.plot(
x = jaxPassDefense_model,
strength = jaxPassDefense_arcStrength
)
# Model fitting
v_models <- c(
"pc.stable","gs","iamb","fast.iamb","inter.iamb","iamb.fdr",
"hc", "tabu",
"mmhc","rsmax2","h2pc",
"mmpc","si.hiton.pc","hpc",
"chow.liu","aracne"
)
list_crossValidation <- list()
for(j in v_models) try({
list_crossValidation[[j]] <- bn.cv(
data = hailfinder,
bn = j,
k = 2,
runs = 2
)
},silent = TRUE)
warnings()
list_crossValidation <- list()
for(j in v_models) try({
list_crossValidation[[j]] <- bn.cv(
data = jaxPassDefense_scaled_discrete,
bn = j,
k = 2,
runs = 2
)
},silent = TRUE)
warnings()
View(list_crossValidation)
list_mean <- list()
for(j in names(list_crossValidation)){
for(k in 1:length(list_crossValidation[[j]])){
list_mean[[j]][[k]] <- rep(NA,length(list_crossValidation[[j]][[k]]))
for(l in 1:length(list_crossValidation[[j]][[k]])){
list_mean[[j]][[k]][l] <- list_crossValidation[[j]][[k]][[l]]$loss
}
}
list_mean[[j]] <- unlist(list_mean[[j]])
}
sort(base::sapply(X = list_mean,FUN = mean))
list_crossValidation
list_mean <- list()
for(j in names(list_crossValidation)){
for(k in 1:length(list_crossValidation[[j]])){
list_mean[[j]][[k]] <- rep(NA,length(list_crossValidation[[j]][[k]]))
for(l in 1:length(list_crossValidation[[j]][[k]])){
list_mean[[j]][[k]][l] <- list_crossValidation[[j]][[k]][[l]]$loss
}
}
list_mean[[j]] <- unlist(list_mean[[j]])
}
sort(base::sapply(X = list_mean,FUN = mean))
########### Score based #########################
# Calculated above, here we'll just call on the model
jaxPassDefense_scored
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# make values discrete
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled)
summary(jaxPassDefense_scaled_discrete)
require("Rgraphviz")
############ Practice with earlier bayesian model video ##########
jaxPassDefense_scored = hc(jaxPassDefense_scaled_discrete)
############ Practice with earlier bayesian model video ##########
jaxPassDefense_scored = hc(jaxPassDefense_scaled_discrete)
graphviz.plot(jaxPassDefense_scored)
jaxPassDefense_arcStrength = arc.strength(
x = jaxPassDefense_scored,
data = jaxPassDefense_scaled_discrete
)
strength.plot(
x = jaxPassDefense_scored,
strength = jaxPassDefense_arcStrength
)
# Model fitting
v_models <- c(
"pc.stable","gs","iamb","fast.iamb","inter.iamb","iamb.fdr",
"hc", "tabu",
"mmhc","rsmax2","h2pc",
"mmpc","si.hiton.pc","hpc",
"chow.liu","aracne"
)
list_crossValidation <- list()
for(j in v_models) try({
list_crossValidation[[j]] <- bn.cv(
data = jaxPassDefense_scaled_discrete,
bn = j,
k = 2,
runs = 2
)
},silent = TRUE)
list_crossValidation
list_mean <- list()
for(j in names(list_crossValidation)){
for(k in 1:length(list_crossValidation[[j]])){
list_mean[[j]][[k]] <- rep(NA,length(list_crossValidation[[j]][[k]]))
for(l in 1:length(list_crossValidation[[j]][[k]])){
list_mean[[j]][[k]][l] <- list_crossValidation[[j]][[k]][[l]]$loss
}
}
list_mean[[j]] <- unlist(list_mean[[j]])
}
sort(base::sapply(X = list_mean,FUN = mean))
########### Score based #########################
# Calculated above, here we'll just call on the model
jaxPassDefense_scored
########### Constraint based ####################
jaxPassDefense_constraint = iamb.fdr(jaxPassDefense_scaled_discrete)
jaxPassDefense_constraint
jaxPassDefense_arcStrength_constraint = arc.strength(
x = jaxPassDefense_constraint,
data = jaxPassDefense_scaled_discrete
)
strength.plot(
x = jaxPassDefense_constraint,
strength = jaxPassDefense_arcStrength_constraint
)
########### Hybrid based ########################
jaxPassDefense_hybrid = h2pc(jaxPassDefense_scaled_discrete)
jaxPassDefense_hybrid
jaxPassDefense_arcStrength_hybrid = arc.strength(
x = jaxPassDefense_hybrid,
data = jaxPassDefense_scaled_discrete
)
strength.plot(
x = jaxPassDefense_scored,
strength = jaxPassDefense_arcStrength_hybrid
)
strength.plot(
x = jaxPassDefense_hybrid,
strength = jaxPassDefense_arcStrength_hybrid
)
########### Local Discovery based ###############
jaxPassDefense_local = aracne(jaxPassDefense_scaled_discrete)
jaxPassDefense_local
jaxPassDefense_arcStrength_local = arc.strength(
x = jaxPassDefense_local,
data = jaxPassDefense_scaled_discrete
)
strength.plot(
x = jaxPassDefense_local,
strength = jaxPassDefense_arcStrength
)
########### Constraint based ####################
jaxPassDefense_constraint = iamb.fdr(jaxPassDefense_scaled_discrete)
jaxPassDefense_local
########### Local Discovery based ###############
jaxPassDefense_local = aracne(jaxPassDefense_scaled_discrete)
jaxPassDefense_local
View(jaxPassDefense_scored)
View(jaxPassDefense_scaled_discrete)
########### Local Discovery based ###############
jaxPassDefense_local = aracne(jaxPassDefense_scaled_discrete)
jaxPassDefense_local
jaxPassDefense_arcStrength_local = arc.strength(
x = jaxPassDefense_local,
data = jaxPassDefense_scaled_discrete
)
########### Constraint based ####################
jaxPassDefense_constraint = iamb.fdr(jaxPassDefense_scaled_discrete)
score(jaxPassDefense_arcStrength_local)
score(jaxPassDefense_local)
score(jaxPassDefense_local, type = "bic")
bnlearn::score(jaxPassDefense_local, type = "bic")
bnlearn::score(jaxPassDefense_local, jaxPassDefense_scaled_discrete)
bnlearn::score(jaxPassDefense_hybrid, jaxPassDefense_scaled_discrete)
bnlearn::score(jaxPassDefense_constraint, jaxPassDefense_scaled_discrete)
bnlearn::score(jaxPassDefense_scored, jaxPassDefense_scaled_discrete)
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# make values discrete
summary(jaxPassDefense_scaled)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled)
summary(jaxPassDefense_scaled_discrete)
# make values discrete
summary(jaxPassDefense_scaled)
discreteList = lapply(
X = c("interval", "quantile", "hartemink"),
FUN = function(method) discretize(
data = jaxPassDefense_scaled[, numericColumns],
method = method,
breaks = 6, ordered = TRUE
)
)
discreteList = lapply(
X = c("interval", "quantile", "hartemink"),
FUN = function(method) discretize(
data = jaxPassDefense_scaled[, numericColumns],
method = method,
breaks = 4, ordered = TRUE
)
)
discreteList = lapply(
X = c("interval", "quantile", "hartemink"),
FUN = function(method) discretize(
data = jaxPassDefense_scaled[, numericColumns],
method = method,
breaks = 3, ordered = TRUE
)
)
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
# make values discrete
summary(jaxPassDefense_scaled)
discreteList = lapply(
X = c("interval", "quantile", "hartemink"),
FUN = function(method) discretize(
data = jaxPassDefense_scaled[, numericColumns],
method = method,
breaks = 3,
ordered = TRUE
)
)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled, breaks = 6)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled, breaks = 5)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled, breaks = 4)
jaxPassDefense_scaled_discrete = discretize(jaxPassDefense_scaled, breaks = 3)
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
jaxPassDefense_scaled_discrete$ydstogo = discretize(jaxPassDefense_scaled$ydstogo)
numericColumns = subset(numericColumns, -c(ydstogo))
numericColumns = subset(numericColumns, -c("ydstogo"))
numericColumns = subset(numericColumns, select = -c(ydstogo))
require(bnlearn)
# scaled with normalization
jaxPassDefense_scaled = read.csv("../data/jaxPassDefenseScaled.csv")
# Remove id column and timeouts because they do not appear important.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(X, jax_timeouts_remaining, opp_timeouts_remaining))
# Set columns as factors or numerical data
factorColumns = c("goal_to_go", "shotgun", "no_huddle", "first_down_pass", "interception",
"side_of_field_MID", "side_of_field_OPP", "qtr_2", "qtr_3", "qtr_4", "down_2",
"down_3", "down_4", "pass_length_short", "pass_location_middle", "pass_location_right",
"td_team_1", "td_team_2")
numericColumns = c("yardline_100", "quarter_seconds_remaining", "ydstogo", "ydsnet", "yards_gained",
"air_yards", "yards_after_catch", "score_differential", "jax_score", "opp_score")
jaxPassDefense_scaled[, factorColumns] = lapply(jaxPassDefense_scaled[, factorColumns], as.factor)
jaxPassDefense_scaled[, numericColumns] = lapply(jaxPassDefense_scaled[, numericColumns], as.numeric)
jaxPassDefense_scaled_discrete$ydstogo = discretize(jaxPassDefense_scaled$ydstogo)
View(jaxPassDefense_scaled)
numericColumns = subset(numericColumns, select = -c(ydstogo))
jaxPassDefense_scaled_discrete[, ydstogo] = discretize(jaxPassDefense_scaled[, ydstogo])
jaxPassDefense_scaled_discrete[, "ydstogo"] = discretize(jaxPassDefense_scaled[, "ydstogo"])
# names(discreteList) = c("interval", "quantile", "hartemink")
# lapply(X = discreteList, FUN = summary)
jaxPassDefense_scaled = jaxPassDefense_scaled[, -"ydstogo"]
# names(discreteList) = c("interval", "quantile", "hartemink")
# lapply(X = discreteList, FUN = summary)
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(ydstogo))
jaxPassDefense_scaled_discrete = discretize(
jaxPassDefense_scaled,
breaks = 6
)
jaxPassDefense_scaled_discrete = discretize(
jaxPassDefense_scaled,
breaks = 4
)
