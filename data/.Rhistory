source('C:/Users/joshu/Downloads/TCGA-Assembler-20170529T165157Z-001.zip', encoding = 'UTF-8')
source('C:/Users/joshu/Downloads/TCGA-Assembler-20170529T165157Z-001/TCGA-Assembler/Module_A.R', encoding = 'UTF-8')
memory.limit()
memory.size()
memory.limit(50000)
ColumnName1 <- strsplit(ReadIn, split = "\t")[[1]]
demo()
ColumnName1 <- strsplit(ReadIn, split = "\t")[[1]]
library(RCurl)
library(RCurl)
install.packages(c("tidyverse", "RSQLite"))
memory.limit(60000)
library(tidyverse)
library(data.table)
library(xlsx)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
clinical_data <- read.csv("data/BRCA.clin.merged.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
?read.csv()
q()
#Data Preprocessing
# no libraries need for this in R
dataset = read.csv('~/ISC215/python/dataInterpreter/Data.csv')
#correcting for missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
#encode categorical data
dataset$City = factor(dataset$City,
levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
###########library(caTools)              these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
#Data Preprocessing
# no libraries need for this in R
dataset = read.csv('~/ISC215/python/dataInterpreter/Data.csv')
#correcting for missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
#encode categorical data
dataset$City = factor(dataset$City,
levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
library(caTools)              #these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
pbinom(4, 25, .2)
1- pbinom(2, 25, .2)
dbinom(4, 25, .2)
pbinom(4, 25, .2) - pbinom(3, 25, .2)
binom.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23))
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=T)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x ~ y, paired=TRUE)
x = c(2, 6, -1, 1, 5, 0, -12, -1, -4, 9, -7, -15)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE, conf.int = T)
q()
write.csv(jaxRunOrPass, "divisionRunOrPassData.csv")
data2019 = read.csv("reg_pbp_2019.csv")
data2019 = read.csv("reg_pbp_2019.csv")
getwd()
setwd("STA6704/Assignment/data/")
data2019 = read.csv("reg_pbp_2019.csv")
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run"
| play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team, quarter_end, sp, qb_spike))
write.csv(jaxRunOrPass, "jaxRunOrPassData.csv")
View(jaxData)
View(jaxRunOrPass)
data2019 = read.csv("reg_pbp_2019.csv")
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post))
write.csv(jaxRunOrPass, "jaxRunOrPassData.csv")
data2019 = read.csv("reg_pbp_2019.csv")
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
}
if (df[row, "side_of_field"] != "JAX") {
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, postteam, posteam_type))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
}
if (df[row, "side_of_field"] != "JAX") {
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type))
return(df)
}
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
warnings()
data2019 = read.csv("reg_pbp_2019.csv")
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
View(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
warnings()
levels(jaxRunOrPass$side_of_field)
data2019 = read.csv("reg_pbp_2019.csv")
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
df[row, "side_of_field"] = NA
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
df[row, "td_team"] = NA
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
changeColumnsToRepresentJAX = function(df) {
df$side_of_field = as.character(df$side_of_field)
df$td_team = as.character(df$team_td)
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df$side_of_field = as.factor(df$side_of_field)
df$td_team = as.factor(df$team_td)
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
df$side_of_field = as.character(df$side_of_field)
df$td_team = as.character(df$team_td)
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df$side_of_field = as.factor(df$side_of_field)
df$td_team = as.factor(df$team_td)
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
data2019 = read.csv("reg_pbp_2019.csv", stringsAsFactors = FALSE)
jaxData = subset(data2019, away_team == "JAX" | home_team == "JAX")
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
write.csv(jaxRunOrPass, "jaxRunOrPassData.csv")
write.csv(jaxRunOrPass, "jaxRunOrPassData.csv")
jaxRunOrPass = jaxRunOrPass[is.na(jaxRunOrPass)] = ""
jaxRunOrPass = subset(jaxData, play_type == "run" | play_type == "pass")
jaxRunOrPass = jaxRunOrPass[, colSums(is.na(jaxRunOrPass)) != nrow(jaxRunOrPass)]
jaxRunOrPass = jaxRunOrPass[c(0:55)]
jaxRunOrPass = subset(jaxRunOrPass, select = -c(desc, play_id, game_id, two_point_conv_result, timeout_team,
quarter_end, sp, qb_spike, qb_kneel, timeout, posteam_timeouts_remaining,
defteam_timeouts_remaining, posteam_score, defteam_score, posteam_score_post,
defteam_score_post, score_differential_post, yrdln, game_date))
alterYardageForDefense = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "posteam"] != "JAX") {
df[row, "yards_gained"] = -df[row, "yards_gained"]
df[row, "air_yards"] = -df[row, "air_yards"]
df[row, "yards_after_catch"] = -df[row, "yards_after_catch"]
}
}
return(df)
}
changeColumnsToRepresentJAX = function(df) {
for(row in 1:nrow(df)) {
if (df[row, "home_team"] == "JAX") {
df[row, "jax_score"] = df[row, "total_home_score"]
df[row, "opp_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
} else if(df[row, "away_team"] == "JAX") {
df[row, "opp_score"] = df[row, "total_home_score"]
df[row, "jax_score"] = df[row, "total_away_score"]
df[row, "jax_timeouts_remaining"] = df[row, "away_timeouts_remaining"]
df[row, "opp_timeouts_remaining"] = df[row, "home_timeouts_remaining"]
}
if (df[row, "side_of_field"] != "JAX" & df[row, "side_of_field"] != "MID") {
levels(df$side_of_field) = c("JAX", "OPP")
df[row, "side_of_field"] = "OPP"
}
if (!is.na(df[row, "td_team"]) & df[row, "td_team"] != "JAX") {
levels(df$td_team) = c("JAX", "OPP")
df[row, "td_team"] = "OPP"
}
}
df = subset(df, select = -c(total_away_score, total_home_score, defteam, posteam, posteam_type, home_timeouts_remaining,
away_timeouts_remaining))
return(df)
}
jaxRunOrPass = alterYardageForDefense(jaxRunOrPass)
jaxRunOrPass = changeColumnsToRepresentJAX(jaxRunOrPass)
jaxRunOrPass[is.na(jaxRunOrPass)] = ""
write.csv(jaxRunOrPass, "jaxRunOrPassData.csv")
