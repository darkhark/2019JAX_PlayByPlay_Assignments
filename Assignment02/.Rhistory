levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
library(caTools)              #these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
pbinom(4, 25, .2)
1- pbinom(2, 25, .2)
dbinom(4, 25, .2)
pbinom(4, 25, .2) - pbinom(3, 25, .2)
binom.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23))
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=T)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x ~ y, paired=TRUE)
x = c(2, 6, -1, 1, 5, 0, -12, -1, -4, 9, -7, -15)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE, conf.int = T)
q()
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
getwd()
setwd("STA6704/2019JAX_PlayByPlay/")
setwd("Assignment02/")
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
require("ggfortify")
autoplot(
object = jaxPassDefense_PC,
data = jaxPassDefense,
colour = "yards_gained"
)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
# Using this, we can see that the only variance above double digits is PC1. To get to 90%
# cumulative variance we would need the first 18 dimensions, which is a reduction of
# 11 dimensions(~40% of the total dimensions).
factoextra::get_eigenvalue(jaxPassDefense_PC)
jaxPassDefense_get_vars = factoextra::get_pca_var(jaxPassDefense_PC)
jaxPassDefense_get_vars$coord
jaxPassDefense_get_vars$cos2
jaxPassDefense_get_vars$contrib
jaxPassDefense_get_ind = factoextra::get_pca_ind(jaxPassDefense_PC)
head(jaxPassDefense_get_ind$coord)
head(jaxPassDefense_get_ind$cos2)
head(jaxPassDefense_get_ind$contrib)
install.packages("Rtsne")
################ t-DSNE -> t- distributed stochastic Neighbor Embedding ############
require("Rtsne")
set.seed(32)
jaxPassDefense_tsne = Rtsne::Rtsne(jaxPassDefense_scaled)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
require("ggfortify")
autoplot(
object = jaxPassDefense_PC,
data = jaxPassDefense,
colour = "yards_gained"
)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense_scaled = subset(jaxPassDefense_scaled, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
View(jaxPassDefense_PC)
View(jaxPassDefense_scaled)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense = subset(jaxPassDefense, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid,
qb_dropback, qb_scramble))
View(jaxPassDefense)
jaxPassDefense_scaled = scale(jaxPassDefense)
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense = subset(jaxPassDefense, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid,
qb_dropback, qb_scramble))
jaxPassDefense_scaled = scale(jaxPassDefense)
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
# Using this, we can see that the only variance above double digits is PC1. To get to 90%
# cumulative variance we would need the first 18 dimensions, which is a reduction of
# 11 dimensions(~40% of the total dimensions).
factoextra::get_eigenvalue(jaxPassDefense_PC)
jaxPassDefense_get_vars = factoextra::get_pca_var(jaxPassDefense_PC)
jaxPassDefense_get_vars$coord
jaxPassDefense_get_vars$cos2
jaxPassDefense_get_vars$contrib
jaxPassDefense_get_ind = factoextra::get_pca_ind(jaxPassDefense_PC)
head(jaxPassDefense_get_ind$coord)
head(jaxPassDefense_get_ind$cos2)
head(jaxPassDefense_get_ind$contrib)
################ t-DSNE -> t- distributed stochastic Neighbor Embedding ############
require("Rtsne")
set.seed(32)
jaxPassDefense_tsne = Rtsne::Rtsne(jaxPassDefense_scaled)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
y = jaxPassDefense[yards_gained,]
# Remove target variable
y = jaxPassDefense["yards_gained",]
View(y)
# Remove target variable
y = jaxPassDefense["yards_gained",:]
# Remove target variable
y = jaxPassDefense[,"yards_gained"]
# Remove target variable
y = jaxPassDefense["yards_gained"]
View(y)
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense = subset(jaxPassDefense, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid,
qb_dropback, qb_scramble))
jaxPassDefense_scaled = scale(jaxPassDefense)
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
# Using this, we can see that the only variance above double digits is PC1. To get to 90%
# cumulative variance we would need the first 18 dimensions, which is a reduction of
# 11 dimensions(~40% of the total dimensions).
factoextra::get_eigenvalue(jaxPassDefense_PC)
jaxPassDefense_get_vars = factoextra::get_pca_var(jaxPassDefense_PC)
jaxPassDefense_get_vars$coord
jaxPassDefense_get_vars$cos2
jaxPassDefense_get_vars$contrib
jaxPassDefense_get_ind = factoextra::get_pca_ind(jaxPassDefense_PC)
head(jaxPassDefense_get_ind$coord)
head(jaxPassDefense_get_ind$cos2)
head(jaxPassDefense_get_ind$contrib)
################ t-DSNE -> t- distributed stochastic Neighbor Embedding ############
require("Rtsne")
set.seed(32)
jaxPassDefense_tsne = Rtsne::Rtsne(jaxPassDefense_scaled)
plot(
jaxPassDefense_tsne$Y,
col = y,
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
head(y)
head(y)
jaxPassDefense_tsne$Y
plot(
jaxPassDefense_tsne$Y,
col = y,
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
plot(
jaxPassDefense_tsne$Y,
col = y,
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
plot(
jaxPassDefense_tsne$Y,
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
as.character(y)
mnist <- dslabs::read_mnist()
X <- as.data.frame(mnist$train$images[1:200,])
X <- X[,sapply(X = X,FUN = max) > 0]
y <- mnist$train$labels[1:1000]
dim(mnist$train$images)
head(X[,180:188])
head(y)
mnist <- dslabs::read_mnist()
X <- as.data.frame(mnist$train$images[1:200,])
X <- X[,sapply(X = X,FUN = max) > 0]
y <- mnist$train$labels[1:200]
dim(mnist$train$images)
head(X[,180:188])
head(y)
jaxPassDefense = read.csv("../data/jaxPassDefense.csv", stringsAsFactors = FALSE)
# Remove added column
jaxPassDefense = subset(jaxPassDefense, select = -c(X))
# Order by yards gained as we want to see where the defense is strong and weak and
# this will likely be the best metric
jaxPassDefense = jaxPassDefense[order(jaxPassDefense$yards_gained, decreasing = TRUE),]
# Remove target variable
y = jaxPassDefense["yards_gained", 0:]
# Remove target variable
y = jaxPassDefense["yards_gained", 0::]
# Remove target variable
y = jaxPassDefense["yards_gained"]
View(y)
# Remove target variable
y = jaxPassDefense$yards_gained
jaxPassDefense = subset(jaxPassDefense, select = -c(yards_gained))
# Scale the variables we have. We don't want seconds becoming a significant factor
# just because it has large values
jaxPassDefense_scaled = scale(jaxPassDefense)
# Apparently the QB will always drop back for a pass by. I thought maybe a quick snap and throw
# would not be considered a dropback but I was wrong. Also, I forgot to remove qb scramble.
# When the qb scrambles, it is then a run play. We will remove these two columns since
# they do not change.
jaxPassDefense_scaled = subset(jaxPassDefense, select = -c(qb_dropback, qb_scramble))
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
# Looking at PC1, we can see a lot of negative values when it comes to the late game. It also
# made me realize many of the variables are tracking the same thing (drive, seconds left,
# half seconds left, qtr, etc.). I'm going to remove a few of these in hopes that it can
# give us more insight into other possible factors.
jaxPassDefense = subset(jaxPassDefense, select = -c(half_seconds_remaining,
game_seconds_remaining,
drive_Late, drive_Mid,
qb_dropback, qb_scramble))
jaxPassDefense_scaled = scale(jaxPassDefense)
jaxPassDefense_PC = prcomp(jaxPassDefense_scaled)
jaxPassDefense_PC
summary(jaxPassDefense_PC)
str(jaxPassDefense_PC)
head(jaxPassDefense_PC$x)
plot(jaxPassDefense_PC)
biplot(jaxPassDefense_PC)
factoextra::fviz_eig(jaxPassDefense_PC)
factoextra::fviz_pca_ind(
jaxPassDefense_PC,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
factoextra::fviz_pca_var(
X = jaxPassDefense_PC,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
# Using this, we can see that the only variance above double digits is PC1. To get to 90%
# cumulative variance we would need the first 18 dimensions, which is a reduction of
# 11 dimensions(~40% of the total dimensions).
factoextra::get_eigenvalue(jaxPassDefense_PC)
jaxPassDefense_get_vars = factoextra::get_pca_var(jaxPassDefense_PC)
jaxPassDefense_get_vars$coord
jaxPassDefense_get_vars$cos2
jaxPassDefense_get_vars$contrib
jaxPassDefense_get_ind = factoextra::get_pca_ind(jaxPassDefense_PC)
head(jaxPassDefense_get_ind$coord)
head(jaxPassDefense_get_ind$cos2)
head(jaxPassDefense_get_ind$contrib)
################ t-SNE -> t- distributed stochastic Neighbor Embedding ############
require("Rtsne")
set.seed(32)
jaxPassDefense_tsne = Rtsne::Rtsne(jaxPassDefense_scaled)
plot(
jaxPassDefense_tsne$Y,
col = y,
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
plot(
jaxPassDefense_tsne$Y,
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
plot(
jaxPassDefense_tsne$Y,
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
length(summary(as.factor(y),maxsum=120))
plot(
jaxPassDefense_tsne$Y,
col = length(summary(as.factor(y),maxsum=120)),
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
plot(
jaxPassDefense_tsne$Y,
col = seq(0, length(summary(as.factor(y),maxsum=120)), 1),
pch = as.character(y),
main = "Scatter Plot of Jax Pass Defense T-SNE Two Dimensions"
)
